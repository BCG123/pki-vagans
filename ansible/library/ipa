#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2016, Christian Heimes <cheimes@redhat.com>

import sys
import subprocess
import shlex

DOCUMENTATION = """
---
module: reversezone
short_description: get reverse zone from an IP address
description:
     - get reverse zone from an IP address
version_added: "1.1"
options:
  args:
    description:
      - ipa arguments
    required: true
    default: null
    aliases: []
  principal:
    description:
      - principal to run as
    required: false
    default: admin
    aliases: []
  password:
    description:
      - password for principal
    required: true
    default:
    aliases: []
  ignore_no_modifications:
    description:
      - ignore 'ERROR: no modifications to be performed'
    required: false
    default: false
    aliases: []
author: Christian Heimes
"""

EXAMPLES = """
"""

class IPA(object):
    KINIT = 'kinit'
    KDESTROY = 'kdestroy'
    IPA = 'ipa'

    def __init__(self, module, args, principal, password):
        self.module = module
        self.args = args
        self.principal = principal
        self.password = password

    def kinit(self):
        cmd = [self.KINIT, self.principal]
        popen = subprocess.Popen(
            cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
        )
        stdout, stderr = popen.communicate(self.password + '\n')
        if popen.returncode != 0:
            raise subprocess.CalledProcessError(popen.returncode, cmd, stdout)

    def kdestroy(self):
        subprocess.check_call([self.KDESTROY])

    def ipa_cmd(self):
        cmd = [self.IPA]
        cmd.extend(shlex.split(self.args))
        popen = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        stdout, stderr = popen.communicate()
        return popen.returncode, stdout, stderr

    def __call__(self):
        self.kinit()
        try:
            return self.ipa_cmd()
        finally:
            self.kdestroy()


def main():
    module = AnsibleModule(
        argument_spec = dict(
            args = dict(required=True),
            principal = dict(default='admin'),
            password = dict(required=True),
            ignore_no_modifications = dict(default=False, type='bool'),
        )
    )
    args = module.params.get('args')
    principal = module.params.get('principal', 'admin')
    password = module.params.get('password')
    ignore_nomod = module.params.get('ignore_no_modifications', False)

    ipa = IPA(module, args, principal, password)
    try:
        rc, stdout, stderr = ipa()
    except Exception as e:
        msg = ": ".join((type(e).__name__, str(e)))
        if hasattr(e, 'output'):
            msg = '\n'.join((msg, e.output))
        module.fail_json(msg=msg)

    changed = True
    if rc != 0 and ignore_nomod and 'no modifications' in stderr:
        rc = 0
        changed = False

    kwargs = dict(rc=rc, stdout=stdout, stderr=stderr, changed=changed)
    if rc != 0:
        module.fail_json(msg='command failed', **kwargs)
    else:
        module.exit_json(**kwargs)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
