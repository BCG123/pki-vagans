#!/usr/bin/python2
import argparse
import json
import os
import re
import shutil
import subprocess


HERE = os.path.dirname(os.path.abspath(__file__))

BASE_PACKAGES = [
    # Vagrant dependencies
    'curl', 'rsync', 'yum-utils', 'which',
    # Ansible dependencies
    'python2', 'python2-dnf', 'libselinux-python', 'python-firewall', 'gnupg',
    # extras
    'rng-tools', 'openssl', 'java-headless',
]

DOGTAG_PACKAGES = [
    '389-ds-base',
    'pki-ca', 'pki-kra', 'pki-ocsp', 'pki-server', 'dogtag-pki-server-theme',
]

# remove old kernels
REMOVE_KERNELS = "package-cleanup -y --oldkernels --count=1"

# We run the update manually because it sometimes fails to write to /dev/log
PKGUPGRADE = "dnf -y --best upgrade || yum -y --best upgrade || true"

# common args for virt-builder and customize
IMG_FORMAT = 'qcow2'
VIRT_ARGS = [
    '--verbose',
    '--format', IMG_FORMAT,
    '--timezone', 'UTC',
    '--run', 'scripts/vagrantsetup',
    '--root-password', 'password:vagrant',
    '--password', 'vagrant:password:vagrant',
    '--run-command', PKGUPGRADE,
    '--install', ','.join(BASE_PACKAGES),
]

VAGRANT_FILE = """\
Vagrant.configure('2') do |config|
        config.vm.synced_folder ".", "/vagrant", type: "rsync"
        config.vm.provider :libvirt do |libvirt|
                libvirt.driver = 'kvm'
                libvirt.connect_via_ssh = false
                libvirt.username = 'root'
                libvirt.storage_pool_name = 'default'
        end
end
"""

FLAVORS = {
    'freeipa': ['--install', ','.join(DOGTAG_PACKAGES),
                '--run', 'scripts/ipa-package-install',
                '--firstboot', 'scripts/ipa-firstboot'],
    'freeipa43-copr': ['--run', 'scripts/freeipa43-copr',
                       '--install', ','.join(DOGTAG_PACKAGES),
                       '--run', 'scripts/ipa-package-install',
                       '--firstboot', 'scripts/ipa-firstboot'],
    'dogtag': ['--install', ','.join(DOGTAG_PACKAGES)],
}

# os_version, suffix
PLATFORMS = {
    'fedora23': ('fedora-23', 'f23'),
    'fedora24': ('fedora-24', 'f24'),
    'centos72': ('centos-7.2', 'centos72'),
    'rhel72': ('rhel-7.2', 'rhel72'),
}


def trimbox(args, baseimage=False):
    """Remove temporary files, logs and sparsify image
    """
    filename = args.boxworkfile if not baseimage else args.baseimage
    # keep ~vagrant/.ssh
    subprocess.check_call(
        ['virt-sysprep', '--operations', 'defaults,-ssh-userdir', '-a', filename]
    )
    # print('Trimming')
    subprocess.check_call(
        ['virt-sparsify', '--in-place', filename]
    )

def remove_kernels(args, baseimage=False):
    """Remove old kernels

    dnf/yum doesn't remove the currently running Kernel. Boot the image a
    second time to remove the previous Kernel.
    """
    filename = args.boxworkfile if not baseimage else args.baseimage
    subprocess.check_call(
        ['virt-customize',
         '--format', IMG_FORMAT,
         '--run-command', REMOVE_KERNELS,
         '-a', filename]
    )


def selinux_relabel(args, baseimage=False):
    """boot machine once to run the selinux relabelling

    Taken from purpleidea's virt-builder
    https://www.redhat.com/archives/libguestfs/2014-January/msg00183.html
    https://github.com/libguestfs/libguestfs/commit/20a4bfde9628cfeb8bea441cab7dcc94843b34e3
    """
    filename = args.boxworkfile if not baseimage else args.baseimage
    print("Put SELinux in permissive mode and touch /.autorelabel")
    cmd = [
        'virt-customize',
        '-a', filename,
        # enforce auto-relabelling
        '--run-command', 'touch /.autorelabel',
        # put SELinux in permissive module for auto-relabelling to work around
        # issue with Fedora 24. selinux_relabel() sets it to enforcing later.
        '--edit', '/etc/selinux/config:s/^SELINUX=enforcing/SELINUX=permissive/',
    ]
    subprocess.check_call(cmd)

    print("qemu boot for SELinux relabelling")
    cmd = [
        'qemu-system-x86_64',
        '-machine', 'accel=kvm:tcg',
        '-cpu', 'host',
        '-m', '512',
        '-drive', 'file={},format=qcow2,if=virtio'.format(filename),
        '-serial', 'stdio',
        '-nographic', '-nodefaults', '-no-reboot',
    ]
    subprocess.check_call(cmd)

    print("Put SELinux in enforcing mode")
    cmd = [
        'virt-edit',
        '-a', filename,
        '/etc/selinux/config',
        '-e', 's/^SELINUX=permissive/SELINUX=enforcing/'
    ]
    subprocess.check_call(cmd)


def virt_builder(args):
    """
    """
    cmd = ['virt-builder']
    cmd.extend(VIRT_ARGS)
    cmd.extend([args.os_version, '--output', args.baseimage])
    subprocess.check_call(cmd)
    trimbox(args, baseimage=True)


def virt_customize(args):
    cmd = ['virt-customize']
    cmd.extend(VIRT_ARGS)
    cmd.extend(args.extra_commands)
    cmd.extend(['-a', args.boxworkfile])
    subprocess.check_call(cmd)


def get_metadata(args):
    xml = subprocess.check_output(
        ['virt-inspector', '-a', args.boxworkfile]
    )
    with open(args.boxxml, 'w') as f:
        f.write(xml)

    info = subprocess.check_output(
        ['qemu-img', 'info', args.boxworkfile]
    )
    with open(args.boxinfo, 'w') as f:
        f.write(info)

    mo = re.search('virtual\ size:.* \((\d+)\ bytes\)', info)
    args.boxsize = int(mo.group(1))


def compress_boxfile(args):
    try:
        os.unlink(args.boxarchive)
    except OSError:
        pass
    # use shell here to use parallel xz
    with open(os.path.join(args.tmpdir, 'metadata.json'), 'w') as f:
        d = {
            "provider": "libvirt",
            "format": IMG_FORMAT,
            "virtual_size": int(round(args.boxsize / 1024.**3))
        }
        json.dump(d, f)
    with open(os.path.join(args.tmpdir, 'Vagrantfile'), 'w') as f:
        f.write(VAGRANT_FILE)
    cmd = "tar cv ./metadata.json ./Vagrantfile ./box.img | xz -4 -T0 > {0.boxarchive}".format(args)
    subprocess.check_call(cmd, shell=True, cwd=args.tmpdir)
    os.unlink(args.boxworkfile)
    os.unlink(os.path.join(args.tmpdir, 'metadata.json'))
    os.unlink(os.path.join(args.tmpdir, 'Vagrantfile'))


def parseargs():
    parser = argparse.ArgumentParser(description='vagrant boxbuilder.')
    parser.add_argument('flavor', choices=sorted(FLAVORS))
    parser.add_argument('platform', choices=sorted(PLATFORMS))

    args = parser.parse_args()

    args.extra_commands = FLAVORS[args.flavor]
    args.os_version, args.suffix = PLATFORMS[args.platform]

    args.tmpdir = os.path.join(HERE, 'tmp')
    args.baseboxdir = os.path.join(HERE, 'basebox')
    args.outputdir = os.path.join(HERE, 'output')

    args.boxname = '{0.flavor}-{0.suffix}'.format(args)
    args.boxarchive = '{0.outputdir}/{0.boxname}.box'.format(args)

    args.boxxml = '{0.outputdir}/{0.boxname}.xml'.format(args)
    args.boxinfo = '{0.outputdir}/{0.boxname}.info'.format(args)
    args.boxsize = None  # in bytes

    args.boxworkfile = '{0.tmpdir}/box.img'.format(args)

    args.baseimage = '{0.baseboxdir}/basebox-{0.os_version}.img'.format(args)

    return parser, args


def main():
    parser, args = parseargs()

    for directory in args.tmpdir, args.baseboxdir, args.outputdir:
        if not os.path.isdir(directory):
            os.makedirs(directory)

    if not os.path.isfile(args.baseimage):
        print("Create Vagrant basebox {0.baseimage}".format(args))
        virt_builder(args)
        # print("SELinux relabel basebox")
        # selinux_relabel(args, baseimage=True)

    print("Copy {0.baseimage} to {0.boxworkfile}".format(args))
    shutil.copyfile(args.baseimage, args.boxworkfile)

    print("Customize with extra packages and updates")
    virt_customize(args)
    print("Remove old kernels")
    remove_kernels(args)
    print("SELinux relabel")
    selinux_relabel(args)
    print("Trim box")
    trimbox(args)
    print("Get box metadata")
    get_metadata(args)
    print("Creating box archive")
    compress_boxfile(args)
    print("Done. To use the new box, run:")
    print("    vagrant box add {0.boxname} {0.boxarchive}".format(args))
    print("You may remove {0.boxarchive} afterwards.".format(args))


if __name__ == '__main__':
    main()
